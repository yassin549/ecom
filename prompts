Prompt 1: Set up the initial project structure for our e-commerce website using Next.js 14 with TypeScript and App Router for optimal server-side rendering and static generation. Integrate Tailwind CSS for styling, Framer Motion for buttery-smooth animations at 60fps, React Icons for scalable vector icons, and Shadcn/UI for reusable UI components to ensure consistent, accessible design patterns. Use Prisma with PostgreSQL (or SQLite for dev) for the database schema handling users, products, orders, carts, and categories with efficient indexing for fast queries. Create a global layout with a responsive, sticky header featuring fluid navigation (home, shop, categories mega-menu, cart icon with badge, user profile dropdown, and admin link if authenticated) using CSS snap-scroll for mobile and hover-scale animations on links. Add a comprehensive footer with grid-based sections for about, policies, contact, newsletter signup (with validation feedback), social icons (with 3D flip hover), and dynamic copyright. On the home page, build a hero section with lazy-loaded high-res background images, parallax scrolling effect, animated typewriter headline, search bar with predictive debounce, and CTA button with ripple click effect. Prioritize performance: enable Next.js image optimization, code splitting via dynamic imports, and SWC compiler; focus on UX with ARIA roles, keyboard navigation, high contrast ratios (AA compliant), touch-friendly elements, and a global theme provider for dark/light mode with prefers-color-scheme detection. Seed the database with 20 diverse sample products, users, and orders. Include meta tags for SEO, PWA manifest for installability, and service worker for offline caching of static assets.

Prompt 2: Enhance the home page with a featured products section using an optimized grid layout (masonry for uneven heights on desktop, flex for mobile) with server-side pagination and infinite scroll via Intersection Observer for lazy loading, ensuring no layout shifts (CLS=0). Product cards should have optimized images with blur-up placeholders, animated hover zoom with shadow lift, star ratings that fill progressively on load, and "Add to Cart" buttons with confetti micro-burst on success. Implement a collapsible categories sidebar with drag-to-scroll on touch devices and accordion animations using spring physics. For the header, add a progress bar that fills during route changes with NProgress integration, and a full-screen loading overlay with a custom SVG spinner (rotating gradients) and percentage text for API calls. Use React Query for data fetching with stale-while-revalidate caching to minimize refetches, and Zustand for lightweight state management of cart and auth. Boost UX with haptic feedback on mobile interactions, tooltips with fade delays, error boundaries for graceful failures, and performance metrics logging in console for Lighthouse scores aiming for 95+. Ensure all animations are GPU-accelerated with will-change, and add prefetching for hovered links to reduce perceived latency.

Prompt 3: Develop the product details page with getStaticPaths for pre-rendering popular products and ISR for others, featuring a split layout: left-side gallery with thumbnail carousel (swipe gestures, lazy-load offscreen images) and pinch-to-zoom, right-side details with sticky buy box on scroll. Include animated quantity stepper with clamp limits, reviews section with lazy-loaded pagination and sentiment-based color highlights, and a related products slider using Embla Carousel with auto-play and drag-free snapping. Add animated breadcrumbs with back-button integration and share buttons that copy URL with clipboard feedback. For the cart, create a persistent off-canvas drawer (persisted via IndexedDB for offline) with item rows featuring swipe-to-delete gestures, real-time total calculations, and undo toast notifications. In the admin dashboard (/admin with middleware auth), build a responsive sidebar with drag-to-resize on desktop and swipe-to-open on mobile, including dark mode toggle with local storage persistence and morphing icon animation. Emphasize performance by using Suspense boundaries for async components, memoization on expensive renders, and virtualized lists for long tables; enhance UX with focus traps in modals, live region announcements for dynamic updates, and micro-interactions like loading skeletons that pulse subtly matching the final layout.

Prompt 4: Refine the checkout flow as a single-page app with multi-step wizard, using URL params for step navigation and optimistic updates for instant feedback. Progress bar should animate segments with checkmarks appearing on completion, form fields with floating labels and auto-focus chaining, real-time validation (debounced to avoid jank) showing inline errors with shake animation only on submit attempts. For pay-on-delivery, add a confirmation modal with order preview and animated signature pad simulation. Persist cart across sessions with encryption for security. In admin, enhance product management with a virtualized table (using TanStack Table) for thousands of rows without lag, column resizing/reordering with drag handles, global search with fuzzy matching and highlight animations, and modals for CRUD with form autosave drafts. Image uploads should use progressive enhancement with web workers for resizing/compression before upload. Double down on performance: implement route prefetching, bundle analysis to keep chunks under 100kb, and CDN for assets; UX wins include voice search integration for accessibility, color-blind friendly palettes, and reduced motion mode respecting user preferences via media query.

Prompt 5: Build order management in admin with a dashboard using TanStack Query for infinite queries on orders, featuring a filterable table with date pickers (flatpickr with range selection animations), status badges with tooltip details, and expandable rows revealing item breakdowns with slide-down transitions. Add bulk actions with progress indicators for long operations. For stats, integrate ApexCharts for interactive graphs: animated line charts with tooltips, donut charts with segment pull-out on hover, and KPI cards with count-up animations throttled for smoothness. Enable real-time via Supabase Realtime or polling with exponential backoff. Add buyer auth with NextAuth.js supporting OAuth providers, profile page with order history timeline (virtualized for long lists) and reorder buttons with one-click cart addition. Performance focus: use Web Vitals monitoring, lazy hydration for below-fold content, and compression for API responses; UX enhancements: password strength meters with visual feedback, forgot-password flows with timed OTP, and personalized recommendations based on viewed products with subtle nudge animations.

Prompt 6: Upgrade site-wide search with Algolia or a custom Lunr.js index for instant results, header search bar expanding on focus with overlay on mobile, autocomplete dropdown with keyboard-navigable items and image thumbnails. In cart, add dynamic promo application with confetti on valid codes and strikethrough original prices. Checkout address fields with geolocation autofill prompt and validation against common errors. Admin bulk actions with optimistic UI and rollback on failure. Implement a notification center with bell icon in header, showing toasts with swipe-dismiss and categorized tabs. Performance: enable HTTP/3, image AVIF/WebP formats with fallbacks, and memoized selectors in state; UX: add breadcrumbs everywhere for navigation depth, empty states with illustrated CTAs (e.g., dancing shopping bag for empty cart), and A/B testing hooks for iterative improvements.

Prompt 7: Elevate hero with video background fallback to images on low bandwidth (detected via navigator.connection), multi-slide carousel with dot navigation and swipe physics, headline with GSAP-like scroll-triggered animations. Footer with collapsible sections on mobile, animated form submissions, and cookie consent banner with preferences modal. Add floating action buttons like chat support placeholder with bounce entry. Lazy load all non-critical scripts, use resource hints for DNS prefetch. Animations: orchestrate with Framer Motion variants for stagger, reduced motion fallbacks to fades. Admin exports with background workers and progress websockets. Performance: aim for TTI under 2s, use Partytown for third-party scripts; UX: haptic on all interactions, undo/redo stack for cart changes, and gamified elements like progress badges for checkout steps.

Prompt 8: Add wishlist with persistent storage, heart icons with particle emitters on toggle, dedicated page with drag-to-reorder. Reviews with emoji reactions, admin moderation queue with keyboard shortcuts for efficiency. Mega-menus with sub-category images lazy-loaded. Skeleton loaders everywhere with content-aware shapes. Guest checkout with seamless transition to account creation post-order. Admin user management with role-based access, searchable paginated lists. Performance: implement critical CSS extraction, server components for data-heavy pages; UX: predictive text in forms, focus outlines with custom styles, and session replay mocks for debugging user flows.

Prompt 9: Secure APIs with rate limiting, CORS, and JWT refresh tokens. Use Edge Functions for low-latency. Email integrations with Resend or mocks, queued for background. Dark mode with CSS variables for instant switches. Accessibility audits with axe-core integration in dev. Edge cases: offline mode with cached data and sync on reconnect, no-results with AI-suggested alternatives. Performance: database query optimization with EXPLAIN, caching layers like Redis mocks; UX: internationalization stubs, screen reader optimized alt texts generated dynamically, and delight moments like seasonal themes.

Prompt 10: Ultimate optimizations: parallax with Intersection Observer throttling, custom cursor with drag effects on desktop. Full PWA with offline analytics. Admin widgets with ResizeObserver for fluid layouts. Cross-browser testing commands in scripts. Deployment to Vercel with preview branches. Summarize features, add CI/CD pipeline suggestions. Performance: bundle phobias checks, Core Web Vitals optimizations; UX: user testing scenarios in comments, heat map simulation notes, and continuous feedback loops via in-app surveys.